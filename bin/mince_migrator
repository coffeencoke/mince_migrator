#!/usr/bin/env ruby
require 'gli'
require 'mince_migrator'
require 'mince_migrator/list_report'
require 'mince_migrator/status_report'

include GLI::App

program_desc 'Manages migrations for Mince gems'

version MinceMigrator.version

desc 'Creates a migration'
arg_name 'Name of migration'
command :create do |c|
  c.action do |global_options,options,args|
    # Allow multiple ways to provide a name
    if args.size > 1
      args = [args.join(" ")]
    end

    creator = MinceMigrator::Creator.new(*args)
    if creator.can_create_migration?
      puts "Migration is being created..."
      creator.create_migration
      puts "Migration created at #{creator.migration_file_relative_path}"
    else
      help_now!(creator.reasons_for_failure)
    end
  end
end

desc 'Lists all migrations and their statuses'
command :list do |c|
  c.action do |global_options,options,args|
    list = MinceMigrator::List.new
    if list.all.any?
      MinceMigrator::ListReport.new(list).run
    else
      puts "\nThere are no migrations in the '#{MinceMigrator::Config.migration_relative_dir}' directory.\n".red
      puts "run the following for more info to create a migration:\n\n"
      puts "  mince_migrator create --help\n\n".green
    end
  end
end

desc 'Reverts a migration'
arg_name 'Name of migration'
command :revert do |c|
  c.action do |global_options,options,args|
    # Allow multiple ways to provide a name
    if args.size > 1
      args = [args.join(" ")]
    end

    reverter = MinceMigrator::Reverter.new(*args)
    if reverter.can_revert_migration?
      puts "Migration is being reverted..."
      reverter.revert_migration
      puts "Migration reverted successfully"
    else
      help_now!(reverter.reasons_for_failure)
    end
  end
end

desc 'Deletes a migration'
arg_name 'Name of migration'
command :delete do |c|
  c.action do |global_options,options,args|
    # Allow multiple ways to provide a name
    if args.size > 1
      args = [args.join(" ")]
    end

    reverter = MinceMigrator::Deleter.new(*args)
    if reverter.can_delete_migration?
      puts "Migration is being deleted..."
      reverter.delete_migration
      puts "Migration deleted successfully"
    else
      help_now!(reverter.reasons_for_failure)
    end
  end
end

desc 'Runs a migration'
arg_name 'Name of migration'
command :run do |c|
  c.action do |global_options,options,args|
    # Allow multiple ways to provide a name
    if args.size > 1
      args = [args.join(" ")]
    end

    runner = MinceMigrator::Migrations::Runner.new(*args)
    if runner.can_run_migration?
      puts "Migration is being ran..."
      runner.run_migration
      puts "Migration finished."
    else
      help_now!(runner.reasons_for_failure)
    end
  end
end

desc 'Runs all migrations that have not yet been ran'
command :run_all do |c|
  c.action do
    list = MinceMigrator::List.new('not ran')
    if list.all.any?
      list.all.each do |migration|
        runner = MinceMigrator::Migrations::Runner.new(migration: migration)
        if runner.can_run_migration?
          puts "Running #{migration.name}..."
          runner.run_migration
          puts "Migration finished."
        else
          help_now!(runner.reasons_for_failure)
        end
      end
    else
      puts "There were no migrations to run."
    end
  end
end

desc 'Shows the details of a migration'
arg_name 'Name of migration'
command :show do |c|
  c.action do |global_options,options,args|
    # Allow multiple ways to provide a name
    if args.size > 1
      args = [args.join(" ")]
    end

    if args.any?
      if migration = MinceMigrator::Migration.find(*args)
        MinceMigrator::StatusReport.new(migration).run
      else
        puts "No migration was found with name: '#{name}'"
      end
    else
      puts "You must provide a name"
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  if File.exists?(MinceMigrator::Config.config_file)
    require MinceMigrator::Config.config_file
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
